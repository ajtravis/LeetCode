class RangeFreqQuery:
    def __init__(self, arr):
        self.n = len(arr)
        self.segment_tree = [0] * (4 * self.n)  # Initialize the segment tree
        self.arr = arr
        self.build_segment_tree(0, 0, self.n - 1)
        
    def build_segment_tree(self, node, left, right):
        if left == right:
            # Leaf node: store the frequency of the single element
            self.segment_tree[node] = 1 if self.arr[left] == self.arr[right] else 0
            return
        
        mid = (left + right) // 2
        # Recursively build left and right subtrees
        self.build_segment_tree(2 * node + 1, left, mid)
        self.build_segment_tree(2 * node + 2, mid + 1, right)
        # Combine the results from left and right subtrees
        self.segment_tree[node] = self.segment_tree[2 * node + 1] + self.segment_tree[2 * node + 2]
        
    def query(self, left, right, value):
        return self.query_helper(0, 0, self.n - 1, left, right, value)
    
    def query_helper(self, node, node_left, node_right, left, right, value):
        if left > node_right or right < node_left:
            return 0  # No overlap with the query range
        
        if left <= node_left and right >= node_right:
            # The current segment is fully covered by the query range
            return self.segment_tree[node]
        
        mid = (node_left + node_right) // 2
        # Recursively query left and right subtrees
        left_count = self.query_helper(2 * node + 1, node_left, mid, left, right, value)
        right_count = self.query_helper(2 * node + 2, mid + 1, node_right, left, right, value)
        return left_count + right_count
