class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)

        if root_x != root_y:
            if self.rank[root_x] < self.rank[root_y]:
                root_x, root_y = root_y, root_x
            self.parent[root_y] = root_x
            if self.rank[root_x] == self.rank[root_y]:
                self.rank[root_x] += 1

def gcdSort(nums):
    n = len(nums)
    uf = UnionFind(n)

    for i in range(n):
        for j in range(i + 1, n):
            if math.gcd(nums[i], nums[j]) > 1:
                uf.union(i, j)

    for i in range(n):
        if uf.find(i) != uf.find(0):
            return False

    return True

# Example usage:
nums1 = [7, 21, 3]
print(gcdSort(nums1))  # Output: True

nums2 = [5, 2, 6, 2]
print(gcdSort(nums2))  # Output: False

nums3 = [10, 5, 9, 3, 15]
print(gcdSort(nums3))  # Output: True
